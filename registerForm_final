import React, { useState } from 'react';

const PatientRegistration = () => {
    // State to store form data
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        phone: '',
        age: '',
        stage_of_dementia: '',
        precautions: '',
        recommended_sleeping_hours: '',
        medications: [{ medication_name: '', dosage: '', scheduled_time: '', frequency: '' }],
        daily_routines: [{ routine_name: '', scheduled_time: '', frequency: '' }]
    });

    // Handle changes to form fields
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    // Handle adding a new medication
    const addMedication = () => {
        setFormData({
            ...formData,
            medications: [...formData.medications, { medication_name: '', dosage: '', scheduled_time: '', frequency: '' }]
        });
    };

    // Handle adding a new daily routine
    const addRoutine = () => {
        setFormData({
            ...formData,
            daily_routines: [...formData.daily_routines, { routine_name: '', scheduled_time: '', frequency: '' }]
        });
    };

    // Handle changes to medication inputs
    const handleMedicationChange = (index, e) => {
        const { name, value } = e.target;
        const newMedications = [...formData.medications];
        newMedications[index][name] = value;
        setFormData({ ...formData, medications: newMedications });
    };

    // Handle changes to daily routine inputs
    const handleRoutineChange = (index, e) => {
        const { name, value } = e.target;
        const newRoutines = [...formData.daily_routines];
        newRoutines[index][name] = value;
        setFormData({ ...formData, daily_routines: newRoutines });
    };

    // Validation functions
    const validateEmail = (email) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    };

    const validateAge = (age) => {
        return age >= 5 && age <= 120;
    };

    // Handle form submission with validation
    const validateForm = () => {
        let validationErrors = {};

        if (!formData.name) validationErrors.name = 'Name is required.';
        if (!validateEmail(formData.email)) validationErrors.email = 'Please enter a valid email address.';
        if (!validateAge(formData.age)) validationErrors.age = 'Please enter a valid age (between 5 and 120).';
        if (!formData.phone) validationErrors.phone = 'Phone number is required.';
        if (!formData.stage_of_dementia) validationErrors.stage_of_dementia = 'Stage of dementia is required.';
        if (!formData.recommended_sleeping_hours) validationErrors.recommended_sleeping_hours = 'Recommended sleeping hours are required.';
        else if (formData.recommended_sleeping_hours < 4 || formData.recommended_sleeping_hours > 12) {
            validationErrors.recommended_sleeping_hours = 'Recommended sleeping hours should be between 4 and 12 hours.';
        }

        formData.medications.forEach((med, index) => {
            if (!med.medication_name) validationErrors[`medication_name_${index}`] = 'Medication name is required.';
            if (!med.dosage) validationErrors[`dosage_${index}`] = 'Dosage is required.';
            if (!med.scheduled_time) validationErrors[`scheduled_time_${index}`] = 'Scheduled time is required.';
            if (!med.frequency) validationErrors[`frequency_${index}`] = 'Frequency is required.';
        });

        formData.daily_routines.forEach((routine, index) => {
            if (!routine.routine_name) validationErrors[`routine_name_${index}`] = 'Routine name is required.';
            if (!routine.scheduled_time) validationErrors[`routine_time_${index}`] = 'Scheduled time is required.';
            if (!routine.frequency) validationErrors[`routine_frequency_${index}`] = 'Frequency is required.';
        });

        setErrors(validationErrors);
        return Object.keys(validationErrors).length === 0;
    };

    // Handle form submission with validation
    const handleSubmit = (e) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        fetch('http://localhost:5000/register-patient', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            // Show success message as popup
            alert('Patient registered successfully!');
            
            // Clear the form data after successful submission
            setFormData({
                name: '',
                email: '',
                phone: '',
                age: '',
                stage_of_dementia: '',
                precautions: '',
                recommended_sleeping_hours: '',
                medications: [{ medication_name: '', dosage: '', scheduled_time: '', frequency: '' }],
                daily_routines: [{ routine_name: '', scheduled_time: '', frequency: '' }]
            });
        })
        .catch(error => console.error('Error:', error));
    };

    return (
        <div>
            <h1>Patient Registration</h1>
            <form onSubmit={handleSubmit}>
                {/* Personal Information */}
                <label>
                    Full Name:
                    <input type="text" name="name" value={formData.name} onChange={handleInputChange} required />
                </label>
                <label>
                    Email:
                    <input type="email" name="email" value={formData.email} onChange={handleInputChange} required />
                </label>
                <label>
                    Phone:
                    <input type="tel" name="phone" value={formData.phone} onChange={handleInputChange} required />
                </label>
                <label>
                    Age:
                    <input type="number" name="age" value={formData.age} onChange={handleInputChange} required />
                </label>
                <label>
                    Stage of Dementia:
                    <select name="stage_of_dementia" value={formData.stage_of_dementia} onChange={handleInputChange} required>
                        <option value="">Select</option>
                        <option value="Early">Early</option>
                        <option value="Middle">Middle</option>
                        <option value="Late">Late</option>
                    </select>
                </label>
                <label>
                    Precautions:
                    <textarea name="precautions" value={formData.precautions} onChange={handleInputChange}></textarea>
                </label>

                <label>
                    Recommended Sleeping Hours:
                    <input 
                        type="number" 
                        name="recommended_sleeping_hours" 
                        value={formData.recommended_sleeping_hours} 
                        onChange={handleInputChange} 
                        required 
                        min="4" 
                        max="12"
                    />
                    {formData.recommended_sleeping_hours && (formData.recommended_sleeping_hours < 4 || formData.recommended_sleeping_hours > 12) && 
                        <p style={{ color: 'red' }}>Recommended sleeping hours should be between 4 and 12 hours.</p>
                    }
                </label>

                {/* Medications Section */}
                <h3>Medications</h3>
                {formData.medications.map((med, index) => (
                    <div key={index}>
                        <label>
                            Medication Name:
                            <input
                                type="text"
                                name="medication_name"
                                value={med.medication_name}
                                onChange={(e) => handleMedicationChange(index, e)}
                                required
                            />
                        </label>
                        <label>
                            Dosage:
                            <input
                                type="text"
                                name="dosage"
                                value={med.dosage}
                                onChange={(e) => handleMedicationChange(index, e)}
                                required
                            />
                        </label>
                        <label>
                            Scheduled Time:
                            <input
                                type="time"
                                name="scheduled_time"
                                value={med.scheduled_time}
                                onChange={(e) => handleMedicationChange(index, e)}
                                required
                            />
                        </label>
                        <label>
                            Frequency:
                            <select name="frequency" value={med.frequency} onChange={(e) => handleMedicationChange(index, e)} required>
                                <option value="">Select</option>
                                <option value="Daily">Daily</option>
                                <option value="Once a Week">Once a Week</option>
                                <option value="One Day Apart">One Day Apart</option>
                                <option value="Custom">Custom</option>
                            </select>
                        </label>
                    </div>
                ))}
                <button type="button" onClick={addMedication}>Add Another Medication</button>

                {/* Daily Routine Section */}
                <h3>Daily Routine</h3>
                {formData.daily_routines.map((routine, index) => (
                    <div key={index}>
                        <label>
                            Routine Name (Exercise/Activity):
                            <input
                                type="text"
                                name="routine_name"
                                value={routine.routine_name}
                                onChange={(e) => handleRoutineChange(index, e)}
                                required
                            />
                        </label>
                        <label>
                            Scheduled Time:
                            <input
                                type="time"
                                name="scheduled_time"
                                value={routine.scheduled_time}
                                onChange={(e) => handleRoutineChange(index, e)}
                                required
                            />
                        </label>
                        <label>
                            Frequency:
                            <select name="frequency" value={routine.frequency} onChange={(e) => handleRoutineChange(index, e)} required>
                                <option value="">Select</option>
                                <option value="Daily">Daily</option>
                                <option value="Once a Week">Once a Week</option>
                                <option value="One Day Apart">One Day Apart</option>
                                <option value="Custom">Custom</option>
                            </select>
                        </label>
                    </div>
                ))}
                <button type="button" onClick={addRoutine}>Add Another Routine</button>

                <button type="submit">Register</button>
            </form>
        </div>
    );
};

export default PatientRegistration;
